@page "/EliminarSistema"
@page "/EliminarSistema/{SistemaId:int}"
@inject SistemaService sistemaservice
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h1>¿Desea Eliminar este Sistema?</h1>
    </div>
    <div class="card-body">
        <h5 class="card-title">Detalles de Sistema</h5>
        <dl class="row">
            <dt class="col-sm-3">TicketId:</dt>
            <dd class="col-sm-9">@sistema.SistemaId</dd>

            <dt class="col-sm-3">Fecha:</dt>
            <dd class="col-sm-9">@sistema.NombredeSistema</dd>
        </dl>
    </div>
    <div class="card-footer">
        <button type="button" class="btn btn-outline-primary" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
    </div>
</div>

@code {
    [Parameter]
    public int SistemaId { get; set; }
    public Sistemas sistema { get; set; } = new Sistemas();

    protected override async Task OnInitializedAsync()
    {
        if (SistemaId > 0)
        {
            sistema.SistemaId = SistemaId;
            await this.Buscar();
        }
    }
    public async Task Buscar()
    {
        var sistemaEncontrado =await sistemaservice.Buscar(sistema.SistemaId);

        if (sistemaEncontrado != null)
        {
            this.sistema = sistemaEncontrado;
        }
    }
    public async Task Eliminar()
    {
        if (!await sistemaservice.Existe(sistema.SistemaId))
        {
            return;
        }
        if (await sistemaservice.Eliminar(this.sistema))
        {
            Atras();
        }
    }
    void Atras()
    {
        Navigation.NavigateTo("/DetalleSistemas");
    }
}
