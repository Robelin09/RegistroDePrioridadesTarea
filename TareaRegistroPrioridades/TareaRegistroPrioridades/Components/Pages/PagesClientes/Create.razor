@page "/RegistroClientes"
@page "/RegistroClientes/{ClientesId:int}"
@inject ClienteService clienteservice
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Registro de Clientes</PageTitle>
<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />    

        <div class="card">
            <div class="card-header">
                <h1>Registro de Clientes</h1>
            </div>
            <div class="card-body">
                <label>ID</label>
                <div class="input-group">
                    <InputNumber min="0" @bind-Value="cliente.ClienteId" class="id-input"></InputNumber>
                </div>
                <div>
                    <label>Nombres:</label>
                <InputText @bind-Value="cliente.Nombres" placeholder="Ej: Robelin Concepcion" class="form-control"></InputText>
                    <validationMessage For="@(() => cliente.Nombres)" />
                        @if (nombreexistente)
                        {
                            <p class="text-danger">El nombre ya existe</p>
                        }
                </div>
                <div>
                <label>T&eacutelefono:</label>
                <InputText @bind-Value="cliente.Telefono" placeholder="Ej: 8092551542" class="form-control"></InputText>
                    <validationMessage For="@(() => cliente.Telefono)"/>
                </div>
                <div>
                    <label>Celular:</label>
                <InputText @bind-Value="cliente.Celular" placeholder="Ej: 8096159699" class="form-control"></InputText>
                    <validationMessage For="@(() => cliente.Celular)"/>
                </div>
                <div>
                    <label>RNC:</label>
                <InputText @bind-Value="cliente.RNC" placeholder="Ej: 40254845213" class="form-control"></InputText>
                    <validationMessage For="@(() => cliente.RNC)"/>
                        @if (rncexistente)
                        {
                            <p class="text-danger">El RNC ya existe</p>
                        }
                </div>
                <div>
                    <label>Email:</label>
                <InputText @bind-Value="cliente.Email" placeholder="Ej: Fulano@gmail.com" class="form-control"></InputText>
                    <validationMessage For="@(() => cliente.Email)"/>
                </div>
                <div>
                    <label>Direcci&oacuten:</label>
                <InputText @bind-Value="cliente.Direccion" placeholder="Ej: SFM, Vista Del Valle #25" class="form-control"></InputText>
                    <validationMessage For="@(() => cliente.Direccion)"/>
                </div>
            </div>
            <div class="card-footer">
            <button type="button" class="btn btn-outline-primary" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
            <button type="submit" class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
            </div>
        </div>
        <h4>@Mensaje</h4>
</EditForm>

@code {
    [Parameter]
    public int ClientesId { get; set; }
    public string Mensaje = " ";
    private bool nombreexistente = false;
    private bool rncexistente = false;
    public Clientes cliente { get; set; } = new Clientes();

protected override async Task OnInitializedAsync()
    {
        if (ClientesId > 0)
        {
            this.cliente.ClienteId = ClientesId;
            await this.Buscar();
        }
    }
    public async Task Buscar()
    {
        var clienteEncontrado =await clienteservice.Buscar(cliente.ClienteId);

        if (clienteEncontrado != null)
        {
          this.cliente = clienteEncontrado;
        }
    }
    public async Task Guardar()
    {
        if (!await Validar())
        {
            Mensaje = "Sus datos no han sido guardados correctamente.";
            return;
        }
        {
            if (await clienteservice.Guardar(this.cliente))
            {
                Mensaje = "Sus datos han sido guardados correctamente.";
                Atras();
            }
        }
    }
    public async Task<bool> Validar()
    {
        var listaClientes = await clienteservice.
        Listar(t => t.Nombres!.ToLower() == cliente.Nombres!.
        ToLower() && t.ClienteId != cliente.ClienteId);
        nombreexistente = listaClientes.Any();

        var listaClientesRnc = await clienteservice.
        Listar(t => t.RNC!.ToLower() == cliente.RNC!.
        ToLower() && t.ClienteId != cliente.ClienteId);
        rncexistente = listaClientesRnc.Any();

        return nombreexistente || rncexistente;
    }
    void Atras()
    {
        Navigation.NavigateTo("DetalleClientes");
    }
}