@page "/RegistroTickets"
@page "/RegistroTickets/{TicketId:int}"
@inject TicketsSERVICES ticketsservices
@inject PrioridadSERVICES prioridadservices
@inject SistemaSERVICES sistemaservices
@inject ClientesSERVICES clientesservices
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Registro de Tickets</PageTitle>
<EditForm Model="tickets" OnValidSubmit="Guardar" >
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <hi>Registro de Tickets</hi>
        </div>
        <div class=" card-body">
            <label>TicketId</label>
            <div class="input-group">
                <InputNumber min="0" @bind-Value="tickets.TicketId" class="id-input"></InputNumber>
            </div>
            <div>
                <label>Fecha:</label>
                <InputDate @bind-Value="tickets.Fecha" class="form-control"></InputDate>
                <validationMessage For="@(() => tickets.Fecha)" />
            </div>

            <div class="colum-3">
                <label>Cliente Id:</label>
                <InputSelect @bind-Value="tickets.ClienteId" class="form-control">
                    <option value="0">Seleccione el ID del Cliente</option>
                    @foreach (var item in ListaClientes)
                    {
                        <option value="@item.ClienteId">@item.ClienteId</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => tickets.ClienteId)" />
            </div>
            <div class="colum-3">
                <label>Sistema Id:</label>
                <InputSelect @bind-Value="tickets.SistemaId" class="form-control">
                    <option value="0">Seleccione el ID del Sistema</option>
                    @foreach (var item in ListaSistemas)
                    {
                        <option value="@item.SistemaId">@item.SistemaId</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => tickets.SistemaId)" />
            </div>
            <div class="colum-3">
                <label>Prioridad Id:</label>
                <InputSelect @bind-Value="tickets.PrioridadId" class="form-control">
                    <option value="0">Seleccione el ID de la Prioridad</option>
                    @foreach (var item in ListaPrioridades)
                    {
                        <option value="@item.PrioridadId">@item.PrioridadId</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => tickets.PrioridadId)" />
            </div>
            <div>
                <label>Solicitado por:</label>
                <InputText @bind-Value="tickets.SolicitadoPor" class="form-control"></InputText>
                    <validationMessage For="@(() => tickets.SolicitadoPor)" />
            </div>
            <div>
               <label>Asunto:</label>
                <InputText @bind-Value="tickets.Asunto" class="form-control"></InputText>
                    <validationMessage For="@(() => tickets.Asunto)" />  
            </div>
            <div>
                <label>Descripci&oacuten:</label>
                <InputText @bind-Value="tickets.Descripcion" class="form-control"></InputText>
                    <validationMessage For="@(() => tickets.Descripcion)" />
            </div>
        </div>
        <div class="card-footer">
            <button type="button" class="btn btn-outline-primary" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
            <button type="submit" class="btn btn-success">Guardar <i class="bi bi-floppy-fill" /></button>
        </div>
    </div>
        <h3>@Mensaje</h3>
</EditForm> 

@code {
    [Parameter]
    public int TicketId { get; set; }
    public string Mensaje = " ";
    public List<Sistema> ListaSistemas { get; set; } = new List<Sistema>();
    public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
    public List<Prioridades> ListaPrioridades { get; set; } = new List<Prioridades>();
    public Tickets tickets { get; set; } = new Tickets();

protected override void OnInitialized()
    {
        if (TicketId > 0)
        {
            this.tickets.TicketId = TicketId;
            this.Buscar();


        }
            ListaClientes = clientesservices.Listar(t => true);
            ListaSistemas = sistemaservices.Listar(t => true);
            ListaPrioridades = prioridadservices.Listar(t => true);
    }
    public void Buscar()
    {
        var ticketEncontrado = ticketsservices.Buscar(tickets.TicketId);

        if (ticketEncontrado != null)
        {
          this.tickets = ticketEncontrado;
        }
    }
    void Guardar()
    {
        if (!Validar())
        {
            Mensaje = "Sus datos no han sido guardados correctamente.";
            return;
        }
        {
            if (ticketsservices.Guardar(this.tickets))
            {
                Mensaje = "Sus datos han sido guardados correctamente.";
            }
        }
    }
bool Validar()
    {
        if (string.IsNullOrEmpty(tickets.SolicitadoPor))
        {
            return false;
        }
        return true;
    }
void Atras()
    {
        Navigation.NavigateTo("/DetalleTickets");
    }
}
