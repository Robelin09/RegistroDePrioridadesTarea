@page "/EliminarPrioridad"
@page "/EliminarPrioridad/{PrioridadId:int}"
@inject PrioridadService prioridadservice
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <h1>¿Desea Eliminar Esta Prioridad?</h1>
    </div>
    <div class="card-body">
        <h5 class="card-title">Detalles de Prioridad</h5>
        <dl class="row">
            <dt class="col-sm-3">PrioridadId:</dt>
            <dd class="col-sm-9">@prioridad.PrioridadId</dd>

            <dt class="col-sm-3">Descripción:</dt>
            <dd class="col-sm-9">@prioridad.Descripcion</dd>

            <dt class="col-sm-3">Días Compromiso:</dt>
            <dd class="col-sm-9">@prioridad.DiasCompromiso</dd>
        </dl>
    </div>
    <div class="card-footer">
        <button type="button" class="btn btn-outline-primary" @onclick="Atras">Volver <i class="bi bi-arrow-return-left" /></button>
        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
    </div>
</div>

@code {
    [Parameter] 
    public int PrioridadId { get; set; }
    public Prioridades prioridad { get; set; } = new Prioridades();

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadId > 0)
        {
            prioridad.PrioridadId = PrioridadId;
            this.Buscar();
        }
    }
    public async Task Buscar()
    {
        var prioridadEncontrada =await prioridadservice.Buscar(prioridad.PrioridadId);

        if (prioridadEncontrada != null)
        {
            this.prioridad = prioridadEncontrada;
        }
    }
    public async Task Eliminar()
    {
        if (!await prioridadservice.Existe(prioridad.PrioridadId))
        {
           
            return;
        }
        if (await prioridadservice.Eliminar(this.prioridad))
        {
           Atras();
        }
    }
    void Atras()
    {
        Navigation.NavigateTo("DetallePrioridad");
    }
}
